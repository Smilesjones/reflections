1. When would you want to use a remote repository rather than keeping all your work
local?

I would use a remote repository if I am going to be working with other people on 
a project, if I usually use multiple computers (like a work computer and a home
computer), or if I want others to access my work, such as an open source project
or as part of a portfolio.

2. Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It might be confusing if you are working with other programmers and their work
is automatically being updated on your local repository.  You might be working
on changes that might not work well with what others are doing.  It seems better
to see what those changes are and decide to pull that work locally.


3. Describe the differences between forks, clones, and branches.  When would you
use one instead of another?


Forks are GitHub's version of clones.  A Fork copies the entire repository and
allows the user who copied it to manipulate that copy.  A Clone is a copy of a
repository on GitHub to a local Git, so the user can manipulate it locally.
A Branch is not a copy but a distinct path that allows the user to commit
changes that will not effect other branches, until those branches are merged.

If I am trying to get a copy of a repository on my GitHub account, I would
choose Fork.  If I am trying to get a copy of a repository locally, so I can
make changes on my own computer, I would use clone.  Finally, if I am working on
a new feature or experimenting with a program and do not want to change the main
branch, I would created a new branch using ... branch.



4. What is the benefit of having a copy of the last known state of the remote
stored locally?

This is beneficial because you can see the most up to date progress of the code
without having to access GitHub.  This will obviously benefit you if you know
you will be working offline for a certain period of time, but even if you are
still able to access GitHub, most of the work an individual programmer does is
going to be on their local machine.  So, it is helpful to have a copy of the
most updated remote state locally to compare and work from.



5. How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

I could collaborate with others just by sending copies of a program back and
forth over the internet.  As we make changes to the program, we could just write
comments on what we did and review those changes.

Though Git/GitHub can be a little confusing when first learning, all the built
in features makes collaborating far easier than doing it manually as I described
above.  The version-control of Git  helps to keep a project organized and safe while
GitHub provides a great place to share and review changes.



6. When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

A better time to make changes to a branch rather than the master could include
if I working on a new feature, experimenting with the code, maybe if I am trying
to clean-up the code.  I think it is probably usually better to just put it on a
branch, as a way of protecting the master from any bugs or adverse effects.

If I am the only one working on a project and am in the early stages of
developing the code, adding to the master probably makes sense.  I would see it
as saving the changes as I biuld the program.  However, if a program is already
developed and I am adding to it, using a branch would probably be safer,
especiially if working with others.

Using a branch with GitHub is more cumbersome, but it is safer and probably more
efficient in the long run. 
